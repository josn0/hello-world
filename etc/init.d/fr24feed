#!/bin/bash

### BEGIN INIT INFO
# Provides:          fr24feed
# Required-Start:    $network $remote_fs $syslog $time
# Required-Stop:     $network $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Flightradar24 Decoder & Feeder
# Description:       FR24Feed lets you effortlessly share ADS-B data with Flightradar24.
#                    It supports multiple receivers, has minimal dependencies and makes 
#                    the entire feeding process as smooth as possible.
### END INIT INFO

. /lib/lsb/init-functions

DAEMON=/usr/bin/fr24feed
PIDFILE=/var/run/fr24feed.pid
MONITORFILE=/dev/shm/fr24feed.txt

test -x $DAEMON || exit 5

LOCKFILE=/var/lock/fr24feed

check_root() {
	if [[ $EUID -ne 0 ]]; then
  		echo "You must be a root user" 2>&1
  		exit 1
  	fi
}

start() {
	check_root
	log_daemon_msg "Starting FR24 feeder" "fr24feed"
	
	/*JOSN*/
	[ -d "/run/dump1090-mutability/" ] || mkdir "/run/dump1090-mutability/"

	DEVICE=`grep "^receiver=\"dvbt" /etc/fr24feed.ini`
	if [ "$DEVICE" != "" ]; then
		rmmod dvb_usb_rtl28xxu >/dev/null 2>&1 || :
		modprobe -r dvb_usb_rtl2832u	#*JOSN*
	fi
    
	ROTATE=`grep "logmode=" /etc/fr24feed.ini | sed 's/[^0-9]*//g'`
	if [ "$ROTATE" == "" ]; then
		ROTATE=2
	fi

	if [ "$ROTATE" != "0" ]; then
		LOGBASE=`grep logpath /etc/fr24feed.ini | sed 's/logpath="*\(.*\)".*/\1/'`
                if [ "$LOGBASE" == "" ] || [ ! -d "$LOGBASE" ]; then
                        LOGBASE=/var/log/fr24feed
                else
                        LOGBASE="$LOGBASE/fr24feed"
                fi

		/sbin/start-stop-daemon --start --oknodo --background \
			--pidfile $PIDFILE --startas /bin/bash -- -c "exec $DAEMON -- --monitor-file=$MONITORFILE --write-pid=$PIDFILE 2>&1 --quiet --log-base=$LOGBASE --log-rotate=$ROTATE >/dev/null 2>&1 &"
	else
		/sbin/start-stop-daemon --start --oknodo --background \
			--pidfile $PIDFILE --startas /bin/bash -- -c "exec $DAEMON -- --monitor-file=$MONITORFILE --write-pid=$PIDFILE --quiet >/dev/null 2>&1 &"
	fi

    status=$?
    log_end_msg $status
    return
}

stop() {
	check_root
	
    log_daemon_msg "Stopping FR24 feeder" "fr24feed"
    
    #/sbin/start-stop-daemon --stop --retry 30 --oknodo --pidfile $PIDFILE
    
    FR24PID=`cat ${PIDFILE} 2>/dev/null`
  
    if [ "${FR24PID}" != "" ] && [ -e "/proc/${FR24PID}" ]; then
    	kill -SIGTERM $FR24PID #2>/dev/null
    	ATTEMPT=0
    	while [ -e "/proc/${FR24PID}" ] && [ "${ATTEMPT}" -le 80 ]; do
    		sleep 0.25
    		ATTEMPT=$((ATTEMPT+1))
    	done
    	
    	if [ -e "/proc/${FR24PID}" ]; then
    		echo "Killing all children processes"
    		pkill -9 -P ${FR24PID}
    		kill -9 ${FR24PID}
    	fi
    fi
    
    log_end_msg $?
    rm -f $PIDFILE
    rm -f $MONITORFILE
    return
}

status() {
	FR24PID=`cat ${PIDFILE} 2>/dev/null`
	
	if [ "$FR24PID" == "" ] || [ ! -e "/proc/${FR24PID}" ]; then
		log_failure_msg "FR24 Feeder/Decoder Process"
		return
	else
		log_success_msg "FR24 Feeder/Decoder Process: running"
	fi
	
	DATE=`grep time_update_utc_s= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	log_success_msg "FR24 Stats Timestamp: $DATE"
	
	
	FEED=`grep 'feed_status=' $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	if [ "$FEED" == "" ]; then
		FEED="unknown"
	fi
	
	if [ "$FEED" == "connected" ]; then
		MODE=`grep feed_current_mode= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
		log_success_msg "FR24 Link: $FEED [$MODE]"
		FEED=`grep feed_alias= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
		log_success_msg "FR24 Radar: $FEED"
		FEED=`grep feed_num_ac_tracked= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
		log_success_msg "FR24 Tracked AC: ${FEED}"
	else
		log_failure_msg "FR24 Link: $FEED"
	fi
	
	RX=`grep rx_connected= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	RX1=`grep num_messages= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	RX2=`grep num_resyncs= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	
	if [ "$RX" == "1" ]; then
		log_success_msg "Receiver: connected ($RX1 MSGS/$RX2 SYNC)"
	else
		log_failure_msg "Receiver: down"
	fi
	
	MLAT=`grep 'mlat-ok=' $MONITORFILE 2>/dev/null | cut -d'=' -f2`
	if [ "$MLAT" == "" ]; then
		MLAT="unknown"
	fi
	
	if [ "$MLAT" == "YES" ]; then
		MLAT_MODE=`grep mlat-mode= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
		log_success_msg "FR24 MLAT: ok [$MLAT_MODE]"
		MLAT_SEEN=`grep mlat-number-seen= $MONITORFILE 2>/dev/null | cut -d'=' -f2`
		log_success_msg "FR24 MLAT AC seen: $MLAT_SEEN"
	else
		log_failure_msg "FR24 MLAT: not running"
	fi

	return
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
	status
        ;;
    restart)
        stop && sleep 2 && start
        ;;
    reload)
	echo "Usage: $0 {start|stop|restart|status}"
	exit 3
	;;
    status|get_status)
	status_of_proc $DAEMON "fr24feed server"
	;;
    *)
	echo "Usage: $0 {start|stop|restart|status}"
	exit 2
	;;
esac
